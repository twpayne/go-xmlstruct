// Code generated by goxmlstruct. DO NOT EDIT.

package musicxml

type Accent struct {
	DefaultX  *int   `xml:"default-x,attr"`
	DefaultY  *int   `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type Accidental struct {
	Parentheses *string `xml:"parentheses,attr"`
	CharData    string  `xml:",chardata"`
}

type Appearance struct {
	Distance  []Distance  `xml:"distance"`
	Glyph     *Glyph      `xml:"glyph"`
	LineWidth []LineWidth `xml:"line-width"`
	NoteSize  []NoteSize  `xml:"note-size"`
}

type Arpeggiate struct {
	DefaultX int `xml:"default-x,attr"`
	Number   int `xml:"number,attr"`
}

type Articulations struct {
	Accent        *Accent        `xml:"accent"`
	Staccatissimo *Staccatissimo `xml:"staccatissimo"`
	Staccato      *Staccato      `xml:"staccato"`
	StrongAccent  *StrongAccent  `xml:"strong-accent"`
}

type Attributes struct {
	Clef         []Clef         `xml:"clef"`
	Divisions    *int           `xml:"divisions"`
	Instruments  *int           `xml:"instruments"`
	Key          *Key           `xml:"key"`
	StaffDetails []StaffDetails `xml:"staff-details"`
	Staves       *int           `xml:"staves"`
	Time         *Time          `xml:"time"`
	Transpose    *Transpose     `xml:"transpose"`
}

type Backup struct {
	Duration int `xml:"duration"`
}

type Barline struct {
	Location string  `xml:"location,attr"`
	BarStyle *string `xml:"bar-style"`
	Ending   *Ending `xml:"ending"`
	Repeat   *Repeat `xml:"repeat"`
}

type Bass struct {
	Arrangement string `xml:"arrangement,attr"`
	BassAlter   int    `xml:"bass-alter"`
	BassStep    string `xml:"bass-step"`
}

type Beam struct {
	Number   int    `xml:"number,attr"`
	CharData string `xml:",chardata"`
}

type Bracket struct {
	DefaultY  int     `xml:"default-y,attr"`
	LineEnd   string  `xml:"line-end,attr"`
	LineType  *string `xml:"line-type,attr"`
	Number    int     `xml:"number,attr"`
	RelativeX *int    `xml:"relative-x,attr"`
	Type      string  `xml:"type,attr"`
}

type Clef struct {
	AfterBarline *string `xml:"after-barline,attr"`
	Number       *int    `xml:"number,attr"`
	PrintObject  *string `xml:"print-object,attr"`
	Line         *int    `xml:"line"`
	Sign         string  `xml:"sign"`
}

type Creator struct {
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Credit struct {
	Page        int           `xml:"page,attr"`
	CreditType  *string       `xml:"credit-type"`
	CreditWords []CreditWords `xml:"credit-words"`
}

type CreditWords struct {
	DefaultX      *int     `xml:"default-x,attr"`
	DefaultY      *int     `xml:"default-y,attr"`
	FontFamily    *string  `xml:"font-family,attr"`
	FontSize      float64  `xml:"font-size,attr"`
	FontWeight    *string  `xml:"font-weight,attr"`
	HAlign        *string  `xml:"halign,attr"`
	Justify       *string  `xml:"justify,attr"`
	Lang          *string  `xml:"lang,attr"`
	LetterSpacing *float64 `xml:"letter-spacing,attr"`
	Space         *string  `xml:"space,attr"`
	Valign        *string  `xml:"valign,attr"`
	CharData      string   `xml:",chardata"`
}

type Dashes struct {
	DashLength  *float64 `xml:"dash-length,attr"`
	DefaultY    *int     `xml:"default-y,attr"`
	Number      int      `xml:"number,attr"`
	SpaceLength *float64 `xml:"space-length,attr"`
	Type        string   `xml:"type,attr"`
}

type Defaults struct {
	Appearance    Appearance     `xml:"appearance"`
	LyricFont     *LyricFont     `xml:"lyric-font"`
	LyricLanguage *LyricLanguage `xml:"lyric-language"`
	MusicFont     MusicFont      `xml:"music-font"`
	PageLayout    PageLayout     `xml:"page-layout"`
	Scaling       Scaling        `xml:"scaling"`
	StaffLayout   *StaffLayout   `xml:"staff-layout"`
	SystemLayout  SystemLayout   `xml:"system-layout"`
	WordFont      WordFont       `xml:"word-font"`
}

type Degree struct {
	PrintObject string `xml:"print-object,attr"`
	DegreeAlter int    `xml:"degree-alter"`
	DegreeType  string `xml:"degree-type"`
	DegreeValue int    `xml:"degree-value"`
}

type Direction struct {
	Directive     *string         `xml:"directive,attr"`
	Placement     *string         `xml:"placement,attr"`
	System        *string         `xml:"system,attr"`
	DirectionType []DirectionType `xml:"direction-type"`
	Offset        *Offset         `xml:"offset"`
	Sound         *Sound          `xml:"sound"`
	Staff         *int            `xml:"staff"`
}

type DirectionType struct {
	Bracket        *Bracket        `xml:"bracket"`
	Dashes         *Dashes         `xml:"dashes"`
	Dynamics       *Dynamics       `xml:"dynamics"`
	Metronome      *Metronome      `xml:"metronome"`
	OctaveShift    *OctaveShift    `xml:"octave-shift"`
	OtherDirection *OtherDirection `xml:"other-direction"`
	Pedal          *Pedal          `xml:"pedal"`
	Rehearsal      *Rehearsal      `xml:"rehearsal"`
	Wedge          *Wedge          `xml:"wedge"`
	Words          []Words         `xml:"words"`
}

type DisplayText struct {
	Space    *string `xml:"space,attr"`
	CharData string  `xml:",chardata"`
}

type Distance struct {
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Dot struct {
	RelativeX *int `xml:"relative-x,attr"`
}

type DownBow struct {
	DefaultX  int    `xml:"default-x,attr"`
	DefaultY  int    `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type Dynamics struct {
	DefaultX  *int      `xml:"default-x,attr"`
	DefaultY  int       `xml:"default-y,attr"`
	FontSize  *float64  `xml:"font-size,attr"`
	HAlign    string    `xml:"halign,attr"`
	RelativeX *int      `xml:"relative-x,attr"`
	F         *struct{} `xml:"f"`
	FF        *struct{} `xml:"ff"`
	MF        *struct{} `xml:"mf"`
	MP        *struct{} `xml:"mp"`
	P         *struct{} `xml:"p"`
	PP        *struct{} `xml:"pp"`
	SFP       *struct{} `xml:"sfp"`
}

type Encoding struct {
	EncodingDate string     `xml:"encoding-date"`
	Software     string     `xml:"software"`
	Supports     []Supports `xml:"supports"`
}

type Ending struct {
	DefaultY  *int   `xml:"default-y,attr"`
	EndLength *int   `xml:"end-length,attr"`
	Number    int    `xml:"number,attr"`
	Type      string `xml:"type,attr"`
}

type Extend struct {
	Type *string `xml:"type,attr"`
}

type Fermata struct {
	DefaultX int    `xml:"default-x,attr"`
	DefaultY *int   `xml:"default-y,attr"`
	Type     string `xml:"type,attr"`
}

type Forward struct {
	Duration int `xml:"duration"`
	Staff    int `xml:"staff"`
	Voice    int `xml:"voice"`
}

type Glyph struct {
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Grace struct {
	Slash *string `xml:"slash,attr"`
}

type GroupNameDisplay struct {
	DisplayText DisplayText `xml:"display-text"`
}

type GroupSymbol struct {
	DefaultX int    `xml:"default-x,attr"`
	CharData string `xml:",chardata"`
}

type Harmony struct {
	DefaultY int     `xml:"default-y,attr"`
	FontSize float64 `xml:"font-size,attr"`
	Bass     *Bass   `xml:"bass"`
	Degree   *Degree `xml:"degree"`
	Kind     Kind    `xml:"kind"`
	Root     Root    `xml:"root"`
}

type Identification struct {
	Creator  []Creator `xml:"creator"`
	Encoding Encoding  `xml:"encoding"`
	Rights   string    `xml:"rights"`
}

type Instrument struct {
	ID string `xml:"id,attr"`
}

type Key struct {
	PrintObject *string `xml:"print-object,attr"`
	Fifths      int     `xml:"fifths"`
	Mode        string  `xml:"mode"`
}

type Kind struct {
	HAlign   string `xml:"halign,attr"`
	Text     string `xml:"text,attr"`
	CharData string `xml:",chardata"`
}

type LeftDivider struct {
	PrintObject string `xml:"print-object,attr"`
}

type LineWidth struct {
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Lyric struct {
	DefaultY     *int      `xml:"default-y,attr"`
	Justify      *string   `xml:"justify,attr"`
	Number       int       `xml:"number,attr"`
	RelativeX    *int      `xml:"relative-x,attr"`
	EndLine      *struct{} `xml:"end-line"`
	EndParagraph *struct{} `xml:"end-paragraph"`
	Extend       *Extend   `xml:"extend"`
	Syllabic     *string   `xml:"syllabic"`
	Text         *string   `xml:"text"`
}

type LyricFont struct {
	FontFamily string  `xml:"font-family,attr"`
	FontSize   float64 `xml:"font-size,attr"`
}

type LyricLanguage struct {
	Lang string `xml:"lang,attr"`
}

type Measure struct {
	Implicit   *string      `xml:"implicit,attr"`
	Number     string       `xml:"number,attr"`
	Width      *int         `xml:"width,attr"`
	Attributes []Attributes `xml:"attributes"`
	Backup     []Backup     `xml:"backup"`
	Barline    *Barline     `xml:"barline"`
	Direction  []Direction  `xml:"direction"`
	Forward    []Forward    `xml:"forward"`
	Harmony    []Harmony    `xml:"harmony"`
	Note       []Note       `xml:"note"`
	Print      *Print       `xml:"print"`
	Sound      []Sound      `xml:"sound"`
}

type MeasureNumbering struct {
	System   *string `xml:"system,attr"`
	CharData string  `xml:",chardata"`
}

type Metronome struct {
	DefaultY    int      `xml:"default-y,attr"`
	FontFamily  string   `xml:"font-family,attr"`
	FontSize    float64  `xml:"font-size,attr"`
	Parentheses string   `xml:"parentheses,attr"`
	BeatUnit    string   `xml:"beat-unit"`
	BeatUnitDot struct{} `xml:"beat-unit-dot"`
	PerMinute   int      `xml:"per-minute"`
}

type MidiInstrument struct {
	ID            string `xml:"id,attr"`
	MidiChannel   *int   `xml:"midi-channel"`
	MidiProgram   int    `xml:"midi-program"`
	MidiUnpitched *int   `xml:"midi-unpitched"`
	Pan           *int   `xml:"pan"`
	Volume        *int   `xml:"volume"`
}

type MusicFont struct {
	FontFamily string  `xml:"font-family,attr"`
	FontSize   float64 `xml:"font-size,attr"`
}

type Notations struct {
	Arpeggiate    *Arpeggiate    `xml:"arpeggiate"`
	Articulations *Articulations `xml:"articulations"`
	Fermata       *Fermata       `xml:"fermata"`
	Ornaments     *Ornaments     `xml:"ornaments"`
	Slur          []Slur         `xml:"slur"`
	Technical     *Technical     `xml:"technical"`
	Tied          []Tied         `xml:"tied"`
	Tuplet        *Tuplet        `xml:"tuplet"`
}

type Note struct {
	DefaultX         *int              `xml:"default-x,attr"`
	PrintDot         *string           `xml:"print-dot,attr"`
	PrintObject      *string           `xml:"print-object,attr"`
	PrintSpacing     *string           `xml:"print-spacing,attr"`
	Accidental       *Accidental       `xml:"accidental"`
	Beam             []Beam            `xml:"beam"`
	Chord            *struct{}         `xml:"chord"`
	Cue              *struct{}         `xml:"cue"`
	Dot              []Dot             `xml:"dot"`
	Duration         *int              `xml:"duration"`
	Grace            *Grace            `xml:"grace"`
	Instrument       *Instrument       `xml:"instrument"`
	Lyric            []Lyric           `xml:"lyric"`
	Notations        *Notations        `xml:"notations"`
	Notehead         *Notehead         `xml:"notehead"`
	Pitch            *Pitch            `xml:"pitch"`
	Rest             *Rest             `xml:"rest"`
	Staff            *int              `xml:"staff"`
	Stem             *Stem             `xml:"stem"`
	Tie              []Tie             `xml:"tie"`
	TimeModification *TimeModification `xml:"time-modification"`
	Type             *Type             `xml:"type"`
	Unpitched        *Unpitched        `xml:"unpitched"`
	Voice            int               `xml:"voice"`
}

type NoteSize struct {
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Notehead struct {
	Filled   string `xml:"filled,attr"`
	CharData string `xml:",chardata"`
}

type OctaveShift struct {
	DashLength  *float64 `xml:"dash-length,attr"`
	DefaultY    *int     `xml:"default-y,attr"`
	Size        int      `xml:"size,attr"`
	SpaceLength *float64 `xml:"space-length,attr"`
	Type        string   `xml:"type,attr"`
}

type Offset struct {
	Sound    *string `xml:"sound,attr"`
	CharData string  `xml:",chardata"`
}

type Ornaments struct {
	Tremolo   *Tremolo  `xml:"tremolo"`
	TrillMark TrillMark `xml:"trill-mark"`
}

type OtherDirection struct {
	DefaultX    int    `xml:"default-x,attr"`
	DefaultY    int    `xml:"default-y,attr"`
	HAlign      string `xml:"halign,attr"`
	PrintObject string `xml:"print-object,attr"`
	CharData    string `xml:",chardata"`
}

type PageLayout struct {
	PageHeight  int           `xml:"page-height"`
	PageMargins []PageMargins `xml:"page-margins"`
	PageWidth   int           `xml:"page-width"`
}

type PageMargins struct {
	Type         *string `xml:"type,attr"`
	BottomMargin int     `xml:"bottom-margin"`
	LeftMargin   int     `xml:"left-margin"`
	RightMargin  int     `xml:"right-margin"`
	TopMargin    int     `xml:"top-margin"`
}

type Part struct {
	ID      string    `xml:"id,attr"`
	Measure []Measure `xml:"measure"`
}

type PartAbbreviationDisplay struct {
	DisplayText DisplayText `xml:"display-text"`
}

type PartGroup struct {
	Number            int               `xml:"number,attr"`
	Type              string            `xml:"type,attr"`
	GroupAbbreviation *string           `xml:"group-abbreviation"`
	GroupBarline      *string           `xml:"group-barline"`
	GroupName         *string           `xml:"group-name"`
	GroupNameDisplay  *GroupNameDisplay `xml:"group-name-display"`
	GroupSymbol       *GroupSymbol      `xml:"group-symbol"`
}

type PartList struct {
	PartGroup []PartGroup `xml:"part-group"`
	ScorePart []ScorePart `xml:"score-part"`
}

type PartName struct {
	PrintObject *string `xml:"print-object,attr"`
	CharData    string  `xml:",chardata"`
}

type PartNameDisplay struct {
	AccidentalText *string     `xml:"accidental-text"`
	DisplayText    DisplayText `xml:"display-text"`
}

type Pedal struct {
	DefaultY  int    `xml:"default-y,attr"`
	HAlign    string `xml:"halign,attr"`
	Line      string `xml:"line,attr"`
	RelativeX *int   `xml:"relative-x,attr"`
	Type      string `xml:"type,attr"`
}

type Pitch struct {
	Alter  *int   `xml:"alter"`
	Octave int    `xml:"octave"`
	Step   string `xml:"step"`
}

type Print struct {
	NewPage                 *string                  `xml:"new-page,attr"`
	NewSystem               *string                  `xml:"new-system,attr"`
	PageNumber              *int                     `xml:"page-number,attr"`
	MeasureNumbering        *MeasureNumbering        `xml:"measure-numbering"`
	PageLayout              *PageLayout              `xml:"page-layout"`
	PartAbbreviationDisplay *PartAbbreviationDisplay `xml:"part-abbreviation-display"`
	PartNameDisplay         *PartNameDisplay         `xml:"part-name-display"`
	StaffLayout             []StaffLayout            `xml:"staff-layout"`
	SystemLayout            *SystemLayout            `xml:"system-layout"`
}

type PullOff struct {
	Number   int    `xml:"number,attr"`
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type Rehearsal struct {
	DefaultX   int     `xml:"default-x,attr"`
	DefaultY   int     `xml:"default-y,attr"`
	FontSize   float64 `xml:"font-size,attr"`
	FontWeight string  `xml:"font-weight,attr"`
	CharData   string  `xml:",chardata"`
}

type Repeat struct {
	Direction string `xml:"direction,attr"`
	Winged    string `xml:"winged,attr"`
}

type Rest struct {
	Measure       *string `xml:"measure,attr"`
	DisplayOctave *int    `xml:"display-octave"`
	DisplayStep   *string `xml:"display-step"`
}

type RightDivider struct {
	PrintObject string `xml:"print-object,attr"`
}

type Root struct {
	RootAlter int    `xml:"root-alter"`
	RootStep  string `xml:"root-step"`
}

type Scaling struct {
	Millimeters float64 `xml:"millimeters"`
	Tenths      int     `xml:"tenths"`
}

type ScoreInstrument struct {
	ID              string    `xml:"id,attr"`
	Ensemble        *struct{} `xml:"ensemble"`
	InstrumentName  string    `xml:"instrument-name"`
	InstrumentSound *string   `xml:"instrument-sound"`
	Solo            *struct{} `xml:"solo"`
}

type ScorePart struct {
	ID                      string                   `xml:"id,attr"`
	Group                   *string                  `xml:"group"`
	MidiInstrument          []MidiInstrument         `xml:"midi-instrument"`
	PartAbbreviation        *string                  `xml:"part-abbreviation"`
	PartAbbreviationDisplay *PartAbbreviationDisplay `xml:"part-abbreviation-display"`
	PartName                PartName                 `xml:"part-name"`
	PartNameDisplay         *PartNameDisplay         `xml:"part-name-display"`
	ScoreInstrument         []ScoreInstrument        `xml:"score-instrument"`
}

type ScorePartwise struct {
	Credit         []Credit       `xml:"credit"`
	Defaults       Defaults       `xml:"defaults"`
	Identification Identification `xml:"identification"`
	MovementNumber *int           `xml:"movement-number"`
	MovementTitle  *string        `xml:"movement-title"`
	Part           []Part         `xml:"part"`
	PartList       PartList       `xml:"part-list"`
	Work           *Work          `xml:"work"`
}

type Slur struct {
	BezierX     *int    `xml:"bezier-x,attr"`
	BezierX2    *int    `xml:"bezier-x2,attr"`
	BezierY     *int    `xml:"bezier-y,attr"`
	BezierY2    *int    `xml:"bezier-y2,attr"`
	DefaultX    int     `xml:"default-x,attr"`
	DefaultY    int     `xml:"default-y,attr"`
	Number      int     `xml:"number,attr"`
	Orientation *string `xml:"orientation,attr"`
	Placement   *string `xml:"placement,attr"`
	Type        string  `xml:"type,attr"`
}

type Sound struct {
	DamperPedal    *string         `xml:"damper-pedal,attr"`
	Dynamics       *int            `xml:"dynamics,attr"`
	ForwardRepeat  *string         `xml:"forward-repeat,attr"`
	Tempo          *int            `xml:"tempo,attr"`
	MidiInstrument *MidiInstrument `xml:"midi-instrument"`
	Swing          *Swing          `xml:"swing"`
}

type Staccatissimo struct {
	DefaultX  int    `xml:"default-x,attr"`
	DefaultY  int    `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type Staccato struct {
	DefaultX  *int   `xml:"default-x,attr"`
	DefaultY  *int   `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type StaffDetails struct {
	Number       *int          `xml:"number,attr"`
	PrintObject  *string       `xml:"print-object,attr"`
	PrintSpacing *string       `xml:"print-spacing,attr"`
	Capo         *int          `xml:"capo"`
	StaffLines   *int          `xml:"staff-lines"`
	StaffSize    *StaffSize    `xml:"staff-size"`
	StaffTuning  []StaffTuning `xml:"staff-tuning"`
}

type StaffLayout struct {
	Number        *int `xml:"number,attr"`
	StaffDistance int  `xml:"staff-distance"`
}

type StaffSize struct {
	Scaling  int    `xml:"scaling,attr"`
	CharData string `xml:",chardata"`
}

type StaffTuning struct {
	Line         int    `xml:"line,attr"`
	TuningOctave int    `xml:"tuning-octave"`
	TuningStep   string `xml:"tuning-step"`
}

type Stem struct {
	DefaultY *float64 `xml:"default-y,attr"`
	CharData string   `xml:",chardata"`
}

type StrongAccent struct {
	DefaultX  int    `xml:"default-x,attr"`
	DefaultY  int    `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
	Type      string `xml:"type,attr"`
}

type Supports struct {
	Attribute *string `xml:"attribute,attr"`
	Element   string  `xml:"element,attr"`
	Type      string  `xml:"type,attr"`
	Value     *string `xml:"value,attr"`
}

type Swing struct {
	Straight struct{} `xml:"straight"`
}

type SystemDividers struct {
	LeftDivider  LeftDivider  `xml:"left-divider"`
	RightDivider RightDivider `xml:"right-divider"`
}

type SystemLayout struct {
	SystemDistance    *int            `xml:"system-distance"`
	SystemDividers    *SystemDividers `xml:"system-dividers"`
	SystemMargins     *SystemMargins  `xml:"system-margins"`
	TopSystemDistance *int            `xml:"top-system-distance"`
}

type SystemMargins struct {
	LeftMargin  int `xml:"left-margin"`
	RightMargin int `xml:"right-margin"`
}

type Technical struct {
	DownBow *DownBow `xml:"down-bow"`
	Fret    int      `xml:"fret"`
	PullOff *PullOff `xml:"pull-off"`
	String  int      `xml:"string"`
	UpBow   *UpBow   `xml:"up-bow"`
}

type Tie struct {
	Type string `xml:"type,attr"`
}

type Tied struct {
	Orientation *string `xml:"orientation,attr"`
	Type        string  `xml:"type,attr"`
}

type Time struct {
	PrintObject *string   `xml:"print-object,attr"`
	Symbol      *string   `xml:"symbol,attr"`
	BeatType    *int      `xml:"beat-type"`
	Beats       *int      `xml:"beats"`
	SenzaMisura *struct{} `xml:"senza-misura"`
}

type TimeModification struct {
	ActualNotes int     `xml:"actual-notes"`
	NormalNotes int     `xml:"normal-notes"`
	NormalType  *string `xml:"normal-type"`
}

type Transpose struct {
	Chromatic    int  `xml:"chromatic"`
	Diatonic     int  `xml:"diatonic"`
	OctaveChange *int `xml:"octave-change"`
}

type Tremolo struct {
	DefaultX int    `xml:"default-x,attr"`
	DefaultY int    `xml:"default-y,attr"`
	Type     string `xml:"type,attr"`
	CharData string `xml:",chardata"`
}

type TrillMark struct {
	DefaultX  int    `xml:"default-x,attr"`
	DefaultY  int    `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type Tuplet struct {
	Bracket    *string `xml:"bracket,attr"`
	Number     int     `xml:"number,attr"`
	Placement  *string `xml:"placement,attr"`
	ShowNumber *string `xml:"show-number,attr"`
	Type       string  `xml:"type,attr"`
}

type Type struct {
	Size     *string `xml:"size,attr"`
	CharData string  `xml:",chardata"`
}

type Unpitched struct {
	DisplayOctave int    `xml:"display-octave"`
	DisplayStep   string `xml:"display-step"`
}

type UpBow struct {
	DefaultX  int    `xml:"default-x,attr"`
	DefaultY  int    `xml:"default-y,attr"`
	Placement string `xml:"placement,attr"`
}

type Wedge struct {
	DefaultY  *int   `xml:"default-y,attr"`
	RelativeX *int   `xml:"relative-x,attr"`
	Spread    *int   `xml:"spread,attr"`
	Type      string `xml:"type,attr"`
}

type WordFont struct {
	FontFamily string  `xml:"font-family,attr"`
	FontSize   float64 `xml:"font-size,attr"`
}

type Words struct {
	DefaultX   *int     `xml:"default-x,attr"`
	DefaultY   *int     `xml:"default-y,attr"`
	FontSize   *float64 `xml:"font-size,attr"`
	FontStyle  *string  `xml:"font-style,attr"`
	FontWeight *string  `xml:"font-weight,attr"`
	HAlign     *string  `xml:"halign,attr"`
	Lang       *string  `xml:"lang,attr"`
	RelativeX  *int     `xml:"relative-x,attr"`
	Space      *string  `xml:"space,attr"`
	CharData   string   `xml:",chardata"`
}

type Work struct {
	WorkNumber *string `xml:"work-number"`
	WorkTitle  string  `xml:"work-title"`
}
