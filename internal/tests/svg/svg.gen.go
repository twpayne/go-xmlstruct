// This file is automatically generated. DO NOT EDIT.

package svg

type A struct {
	Actuate              *string           `xml:"actuate,attr"`
	Dahut                *string           `xml:"dahut,attr"`
	Fill                 *string           `xml:"fill,attr"`
	FontFamily           *string           `xml:"font-family,attr"`
	FontSize             *int              `xml:"font-size,attr"`
	FontWeight           *string           `xml:"font-weight,attr"`
	HRef                 *string           `xml:"href,attr"`
	ID                   *string           `xml:"id,attr"`
	Role                 *string           `xml:"role,attr"`
	Show                 *string           `xml:"show,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	Target               *string           `xml:"target,attr"`
	TextAnchor           *string           `xml:"text-anchor,attr"`
	Title                *string           `xml:"title,attr"`
	Toto                 *string           `xml:"toto,attr"`
	Transform            *string           `xml:"transform,attr"`
	Type                 *string           `xml:"type,attr"`
	XLink                *string           `xml:"xlink,attr"`
	XMLNS                *string           `xml:"xmlns,attr"`
	CharData             string            `xml:",chardata"`
	AnimateElem          *Animate          `xml:"animate"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	CircleElem           []Circle          `xml:"circle"`
	DefsElem             *Defs             `xml:"defs"`
	EllipseElem          *Ellipse          `xml:"ellipse"`
	GElem                *G                `xml:"g"`
	ImageElem            *Image            `xml:"image"`
	LineElem             []Line            `xml:"line"`
	PathElem             *Path             `xml:"path"`
	PolyLineElem         *PolyLine         `xml:"polyline"`
	PolygonElem          *Polygon          `xml:"polygon"`
	RectElem             []Rect            `xml:"rect"`
	SVGElem              *SVG              `xml:"svg"`
	SetElem              []Set             `xml:"set"`
	TSpanElem            *TSpan            `xml:"tspan"`
	TextElem             []Text            `xml:"text"`
	UseElem              []Use             `xml:"use"`
}

type AltGlyph struct {
	ColorInterpolationFilters *string `xml:"color-interpolation-filters,attr"`
	GlyphRef                  *string `xml:"glyphRef,attr"`
	HRef                      *string `xml:"href,attr"`
	ID                        *string `xml:"id,attr"`
	CharData                  string  `xml:",chardata"`
}

type AltGlyphDef struct {
	ID               string         `xml:"id,attr"`
	AltGlyphItemElem []AltGlyphItem `xml:"altGlyphItem"`
	GlyphRefElem     *GlyphRef      `xml:"glyphRef"`
}

type AltGlyphItem struct {
	GlyphRefElem []GlyphRef `xml:"glyphRef"`
}

type Animate struct {
	Accumulate    *string `xml:"accumulate,attr"`
	Additive      *string `xml:"additive,attr"`
	AttributeName string  `xml:"attributeName,attr"`
	AttributeType *string `xml:"attributeType,attr"`
	Begin         *string `xml:"begin,attr"`
	By            *int    `xml:"by,attr"`
	CalcMode      *string `xml:"calcMode,attr"`
	Dur           string  `xml:"dur,attr"`
	End           *string `xml:"end,attr"`
	Fill          *string `xml:"fill,attr"`
	From          *string `xml:"from,attr"`
	HRef          *string `xml:"href,attr"`
	ID            *string `xml:"id,attr"`
	KeySplines    *string `xml:"keySplines,attr"`
	KeyTimes      *string `xml:"keyTimes,attr"`
	OnBegin       *string `xml:"onbegin,attr"`
	RepeatCount   *int    `xml:"repeatCount,attr"`
	To            *string `xml:"to,attr"`
	Values        *string `xml:"values,attr"`
}

type AnimateColor struct {
	AttributeName string  `xml:"attributeName,attr"`
	AttributeType *string `xml:"attributeType,attr"`
	Begin         *string `xml:"begin,attr"`
	Dur           string  `xml:"dur,attr"`
	Fill          *string `xml:"fill,attr"`
	From          *string `xml:"from,attr"`
	ID            string  `xml:"id,attr"`
	RepeatCount   *int    `xml:"repeatCount,attr"`
	To            *string `xml:"to,attr"`
	Values        *string `xml:"values,attr"`
}

type AnimateMotion struct {
	Begin      *string `xml:"begin,attr"`
	CalcMode   *string `xml:"calcMode,attr"`
	Dur        string  `xml:"dur,attr"`
	Fill       string  `xml:"fill,attr"`
	From       *string `xml:"from,attr"`
	KeyPoints  *string `xml:"keyPoints,attr"`
	KeySplines *string `xml:"keySplines,attr"`
	KeyTimes   *string `xml:"keyTimes,attr"`
	Path       *string `xml:"path,attr"`
	Rotate     *string `xml:"rotate,attr"`
	To         *string `xml:"to,attr"`
	Values     *string `xml:"values,attr"`
	MPathElem  *MPath  `xml:"mpath"`
}

type AnimateTransform struct {
	Accumulate    *string `xml:"accumulate,attr"`
	Additive      *string `xml:"additive,attr"`
	AttributeName string  `xml:"attributeName,attr"`
	AttributeType *string `xml:"attributeType,attr"`
	Begin         *string `xml:"begin,attr"`
	By            int     `xml:"by,attr"`
	CalcMode      *string `xml:"calcMode,attr"`
	Dur           string  `xml:"dur,attr"`
	Fill          *string `xml:"fill,attr"`
	From          *string `xml:"from,attr"`
	HRef          *string `xml:"href,attr"`
	ID            *string `xml:"id,attr"`
	KeyTimes      *string `xml:"keyTimes,attr"`
	RepeatCount   *int    `xml:"repeatCount,attr"`
	To            *string `xml:"to,attr"`
	Type          string  `xml:"type,attr"`
	Values        *string `xml:"values,attr"`
}

type Bar struct {
	ID       string `xml:"id,attr"`
	CharData string `xml:",chardata"`
}

type Child struct {
	DTNumber int    `xml:"DTNumber,attr"`
	TestType string `xml:"testType,attr"`
}

type Circle struct {
	CX                   *string           `xml:"cx,attr"`
	CY                   *string           `xml:"cy,attr"`
	Class                *string           `xml:"class,attr"`
	Display              *string           `xml:"display,attr"`
	FiLl                 *string           `xml:"FiLl,attr"`
	Fill                 *string           `xml:"fill,attr"`
	FillOpacity          *float64          `xml:"fill-opacity,attr"`
	Filter               *string           `xml:"filter,attr"`
	FontStyle            *string           `xml:"font-style,attr"`
	Foo                  *string           `xml:"foo,attr"`
	ID                   *string           `xml:"id,attr"`
	Lang                 *string           `xml:"lang,attr"`
	OnClick              *string           `xml:"onclick,attr"`
	OnMouseDown          *string           `xml:"onmousedown,attr"`
	OnMouseOut           *string           `xml:"onmouseout,attr"`
	OnMouseOver          *string           `xml:"onmouseover,attr"`
	PointerEvents        *string           `xml:"pointer-events,attr"`
	R                    string            `xml:"r,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	StrokeWidth          *string           `xml:"stroke-width,attr"`
	Style                *string           `xml:"style,attr"`
	Transform            *string           `xml:"transform,attr"`
	Visibility           *string           `xml:"visibility,attr"`
	AnimateElem          []Animate         `xml:"animate"`
	AnimateColorElem     *AnimateColor     `xml:"animateColor"`
	AnimateMotionElem    *AnimateMotion    `xml:"animateMotion"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	SetElem              []Set             `xml:"set"`
}

type ClipPath struct {
	ClipPath      *string  `xml:"clip-path,attr"`
	ClipPathUnits *string  `xml:"clipPathUnits,attr"`
	Display       *string  `xml:"display,attr"`
	Height        *int     `xml:"height,attr"`
	ID            string   `xml:"id,attr"`
	LightingColor string   `xml:"lighting-color,attr"`
	Width         *int     `xml:"width,attr"`
	X             *int     `xml:"x,attr"`
	Y             *int     `xml:"y,attr"`
	AnimateElem   *Animate `xml:"animate"`
	CircleElem    []Circle `xml:"circle"`
	PathElem      *Path    `xml:"path"`
	RectElem      []Rect   `xml:"rect"`
	TextElem      *Text    `xml:"text"`
	UseElem       []Use    `xml:"use"`
}

type ColorProfile struct {
	HRef string `xml:"href,attr"`
	ID   string `xml:"id,attr"`
	Name string `xml:"name,attr"`
}

type Cursor struct {
	HRef string `xml:"href,attr"`
	ID   string `xml:"id,attr"`
	X    int    `xml:"x,attr"`
	Y    int    `xml:"y,attr"`
}

type Defs struct {
	Color                *string           `xml:"color,attr"`
	ID                   *string           `xml:"id,attr"`
	AltGlyphDefElem      []AltGlyphDef     `xml:"altGlyphDef"`
	CircleElem           []Circle          `xml:"circle"`
	ClipPathElem         []ClipPath        `xml:"clipPath"`
	ColorProfileElem     *ColorProfile     `xml:"color-profile"`
	CursorElem           *Cursor           `xml:"cursor"`
	DefsElem             *Defs             `xml:"defs"`
	FeConvolveMatrixElem *FeConvolveMatrix `xml:"feConvolveMatrix"`
	FilterElem           []Filter          `xml:"filter"`
	FontElem             []Font            `xml:"font"`
	FontFaceElem         []FontFace        `xml:"font-face"`
	ForeignObjectElem    *ForeignObject    `xml:"foreignObject"`
	GElem                []G               `xml:"g"`
	ImageElem            *Image            `xml:"image"`
	LineElem             *Line             `xml:"line"`
	LinearGradientElem   []LinearGradient  `xml:"linearGradient"`
	MarkerElem           []Marker          `xml:"marker"`
	MaskElem             []Mask            `xml:"mask"`
	PathElem             []Path            `xml:"path"`
	PatternElem          []Pattern         `xml:"pattern"`
	PolyLineElem         *PolyLine         `xml:"polyline"`
	PolygonElem          *Polygon          `xml:"polygon"`
	RadialGradientElem   []RadialGradient  `xml:"radialGradient"`
	RectElem             []Rect            `xml:"rect"`
	SVGElem              *SVG              `xml:"svg"`
	ScriptElem           *Script           `xml:"script"`
	StopElem             *Stop             `xml:"stop"`
	StyleElem            *Style            `xml:"style"`
	SymbolElem           []Symbol          `xml:"symbol"`
	TextElem             []Text            `xml:"text"`
	UseElem              *Use              `xml:"use"`
}

type Desc struct {
	ID       *string `xml:"id,attr"`
	CharData string  `xml:",chardata"`
}

type Description struct {
	About           string `xml:"about,attr"`
	DescriptionElem string `xml:"description"`
	FormatElem      string `xml:"format"`
	SubjectElem     string `xml:"subject"`
	TypeElem        []Type `xml:"type"`
}

type Ellipse struct {
	CX          *int      `xml:"cx,attr"`
	CY          *int      `xml:"cy,attr"`
	Class       *string   `xml:"class,attr"`
	Fill        *string   `xml:"fill,attr"`
	FontVariant *string   `xml:"font-variant,attr"`
	ID          *string   `xml:"id,attr"`
	RX          int       `xml:"rx,attr"`
	RY          int       `xml:"ry,attr"`
	Stroke      *string   `xml:"stroke,attr"`
	StrokeWidth *int      `xml:"stroke-width,attr"`
	Transform   *string   `xml:"transform,attr"`
	Visibility  *string   `xml:"visibility,attr"`
	AnimateElem []Animate `xml:"animate"`
}

type FeBlend struct {
	In   string `xml:"in,attr"`
	In2  string `xml:"in2,attr"`
	Mode string `xml:"mode,attr"`
}

type FeColorMatrix struct {
	In     string  `xml:"in,attr"`
	Result *string `xml:"result,attr"`
	Type   string  `xml:"type,attr"`
	Values *string `xml:"values,attr"`
}

type FeComponentTransfer struct {
	FeFuncAElem *FeFuncA  `xml:"feFuncA"`
	FeFuncBElem *FeFuncB  `xml:"feFuncB"`
	FeFuncGElem *FeFuncG  `xml:"feFuncG"`
	FeFuncRElem []FeFuncR `xml:"feFuncR"`
}

type FeComposite struct {
	In          *string   `xml:"in,attr"`
	In2         string    `xml:"in2,attr"`
	K1          *float64  `xml:"k1,attr"`
	K2          *float64  `xml:"k2,attr"`
	K3          *float64  `xml:"k3,attr"`
	K4          *float64  `xml:"k4,attr"`
	Operator    *string   `xml:"operator,attr"`
	Result      *string   `xml:"result,attr"`
	AnimateElem []Animate `xml:"animate"`
}

type FeConvolveMatrix struct {
	Bias          *float64 `xml:"bias,attr"`
	EdgeMode      *string  `xml:"edgeMode,attr"`
	ID            *string  `xml:"id,attr"`
	In            *string  `xml:"in,attr"`
	KernelMatrix  *string  `xml:"kernelMatrix,attr"`
	Order         *string  `xml:"order,attr"`
	PreserveAlpha *bool    `xml:"preserveAlpha,attr"`
	SetElem       *Set     `xml:"set"`
}

type FeDiffuseLighting struct {
	DiffuseConstant    int             `xml:"diffuseConstant,attr"`
	In                 string          `xml:"in,attr"`
	LightingColor      *string         `xml:"lighting-color,attr"`
	Result             string          `xml:"result,attr"`
	SurfaceScale       int             `xml:"surfaceScale,attr"`
	FeDistantLightElem *FeDistantLight `xml:"feDistantLight"`
	FePointLightElem   *FePointLight   `xml:"fePointLight"`
	FeSpotLightElem    *FeSpotLight    `xml:"feSpotLight"`
}

type FeDisplacementMap struct {
	In               string  `xml:"in,attr"`
	In2              string  `xml:"in2,attr"`
	Scale            int     `xml:"scale,attr"`
	XChannelSelector *string `xml:"xChannelSelector,attr"`
	YChannelSelector string  `xml:"yChannelSelector,attr"`
}

type FeDistantLight struct {
	Azimuth   int `xml:"azimuth,attr"`
	Elevation int `xml:"elevation,attr"`
}

type FeFlood struct {
	FloodColor   string   `xml:"flood-color,attr"`
	FloodOpacity *float64 `xml:"flood-opacity,attr"`
	Height       *string  `xml:"height,attr"`
	In           *string  `xml:"in,attr"`
	Result       *string  `xml:"result,attr"`
	Width        *string  `xml:"width,attr"`
	X            *string  `xml:"x,attr"`
	Y            *string  `xml:"y,attr"`
}

type FeFuncA struct {
	Type string `xml:"type,attr"`
}

type FeFuncB struct {
	Amplitude   *int     `xml:"amplitude,attr"`
	Exponent    *int     `xml:"exponent,attr"`
	Intercept   *float64 `xml:"intercept,attr"`
	Offset      *int     `xml:"offset,attr"`
	Slope       *float64 `xml:"slope,attr"`
	TableValues *string  `xml:"tableValues,attr"`
	Type        string   `xml:"type,attr"`
}

type FeFuncG struct {
	Amplitude   *int     `xml:"amplitude,attr"`
	Exponent    *int     `xml:"exponent,attr"`
	Intercept   *int     `xml:"intercept,attr"`
	Offset      *int     `xml:"offset,attr"`
	Slope       *float64 `xml:"slope,attr"`
	TableValues *string  `xml:"tableValues,attr"`
	Type        string   `xml:"type,attr"`
}

type FeFuncR struct {
	Amplitude   *int     `xml:"amplitude,attr"`
	Exponent    *int     `xml:"exponent,attr"`
	Intercept   *float64 `xml:"intercept,attr"`
	Offset      *int     `xml:"offset,attr"`
	Slope       *float64 `xml:"slope,attr"`
	TableValues *string  `xml:"tableValues,attr"`
	Type        string   `xml:"type,attr"`
}

type FeGaussianBlur struct {
	In           *string `xml:"in,attr"`
	Result       *string `xml:"result,attr"`
	StdDeviation string  `xml:"stdDeviation,attr"`
}

type FeImage struct {
	HRef                string  `xml:"href,attr"`
	Height              *string `xml:"height,attr"`
	PreserveAspectRatio string  `xml:"preserveAspectRatio,attr"`
	Result              *string `xml:"result,attr"`
	Width               *string `xml:"width,attr"`
	X                   *string `xml:"x,attr"`
	Y                   *string `xml:"y,attr"`
	SetElem             *Set    `xml:"set"`
}

type FeMerge struct {
	FeMergeNodeElem []FeMergeNode `xml:"feMergeNode"`
}

type FeMergeNode struct {
	In string `xml:"in,attr"`
}

type FeMorphology struct {
	Operator string `xml:"operator,attr"`
	Radius   int    `xml:"radius,attr"`
}

type FeOffset struct {
	DX     float64  `xml:"dx,attr"`
	DY     *float64 `xml:"dy,attr"`
	Height *int     `xml:"height,attr"`
	In     *string  `xml:"in,attr"`
	Result *string  `xml:"result,attr"`
	Width  *int     `xml:"width,attr"`
	X      *int     `xml:"x,attr"`
	Y      *int     `xml:"y,attr"`
}

type FePointLight struct {
	X float64 `xml:"x,attr"`
	Y float64 `xml:"y,attr"`
	Z float64 `xml:"z,attr"`
}

type FeSpecularLighting struct {
	In                 *string         `xml:"in,attr"`
	LightingColor      *string         `xml:"lighting-color,attr"`
	Result             *string         `xml:"result,attr"`
	SpecularConstant   float64         `xml:"specularConstant,attr"`
	SpecularExponent   int             `xml:"specularExponent,attr"`
	SurfaceScale       int             `xml:"surfaceScale,attr"`
	FeDistantLightElem *FeDistantLight `xml:"feDistantLight"`
	FePointLightElem   *FePointLight   `xml:"fePointLight"`
}

type FeSpotLight struct {
	LimitingConeAngle int      `xml:"limitingConeAngle,attr"`
	PointsAtX         int      `xml:"pointsAtX,attr"`
	PointsAtY         int      `xml:"pointsAtY,attr"`
	PointsAtZ         int      `xml:"pointsAtZ,attr"`
	SpecularExponent  int      `xml:"specularExponent,attr"`
	X                 int      `xml:"x,attr"`
	Y                 int      `xml:"y,attr"`
	Z                 int      `xml:"z,attr"`
	AnimateElem       *Animate `xml:"animate"`
}

type FeTurbulence struct {
	BaseFrequency string   `xml:"baseFrequency,attr"`
	ID            string   `xml:"id,attr"`
	NumOctaves    *int     `xml:"numOctaves,attr"`
	Seed          *float64 `xml:"seed,attr"`
	Type          *string  `xml:"type,attr"`
}

type Filter struct {
	FilterPrimitiveUnits    *string              `xml:"filterPrimitiveUnits,attr"`
	FilterUnits             *string              `xml:"filterUnits,attr"`
	Height                  *string              `xml:"height,attr"`
	ID                      *string              `xml:"id,attr"`
	PrimitiveUnits          *string              `xml:"primitiveUnits,attr"`
	Width                   *string              `xml:"width,attr"`
	X                       *string              `xml:"x,attr"`
	Y                       *string              `xml:"y,attr"`
	DescElem                *Desc                `xml:"desc"`
	FeBlendElem             *FeBlend             `xml:"feBlend"`
	FeColorMatrixElem       *FeColorMatrix       `xml:"feColorMatrix"`
	FeComponentTransferElem *FeComponentTransfer `xml:"feComponentTransfer"`
	FeCompositeElem         []FeComposite        `xml:"feComposite"`
	FeConvolveMatrixElem    *FeConvolveMatrix    `xml:"feConvolveMatrix"`
	FeDiffuseLightingElem   *FeDiffuseLighting   `xml:"feDiffuseLighting"`
	FeDisplacementMapElem   *FeDisplacementMap   `xml:"feDisplacementMap"`
	FeFloodElem             []FeFlood            `xml:"feFlood"`
	FeGaussianBlurElem      *FeGaussianBlur      `xml:"feGaussianBlur"`
	FeImageElem             []FeImage            `xml:"feImage"`
	FeMergeElem             *FeMerge             `xml:"feMerge"`
	FeMorphologyElem        *FeMorphology        `xml:"feMorphology"`
	FeOffsetElem            []FeOffset           `xml:"feOffset"`
	FeSpecularLightingElem  *FeSpecularLighting  `xml:"feSpecularLighting"`
	FeTileElem              *struct{}            `xml:"feTile"`
	FeTurbulenceElem        *FeTurbulence        `xml:"feTurbulence"`
}

type Font struct {
	HorizAdvX        *float64      `xml:"horiz-adv-x,attr"`
	HorizOriginX     *int          `xml:"horiz-origin-x,attr"`
	ID               *string       `xml:"id,attr"`
	FontFaceElem     FontFace      `xml:"font-face"`
	GlyphElem        []Glyph       `xml:"glyph"`
	HKernElem        []HKern       `xml:"hkern"`
	MissingGlyphElem *MissingGlyph `xml:"missing-glyph"`
}

type FontFace struct {
	Alphabetic         *int         `xml:"alphabetic,attr"`
	Ascent             *int         `xml:"ascent,attr"`
	BBox               *string      `xml:"bbox,attr"`
	CapHeight          *int         `xml:"cap-height,attr"`
	Descent            *int         `xml:"descent,attr"`
	FontFamily         *string      `xml:"font-family,attr"`
	FontStretch        *string      `xml:"font-stretch,attr"`
	FontStyle          *string      `xml:"font-style,attr"`
	FontVariant        *string      `xml:"font-variant,attr"`
	FontWeight         *string      `xml:"font-weight,attr"`
	Hanging            *int         `xml:"hanging,attr"`
	Ideographic        *int         `xml:"ideographic,attr"`
	Mathematical       *int         `xml:"mathematical,attr"`
	Panose_1           *string      `xml:"panose-1,attr"`
	Slope              *float64     `xml:"slope,attr"`
	StemH              *int         `xml:"stemh,attr"`
	StemV              *int         `xml:"stemv,attr"`
	UnderlinePosition  *int         `xml:"underline-position,attr"`
	UnderlineThickness *int         `xml:"underline-thickness,attr"`
	UnicodeRange       *string      `xml:"unicode-range,attr"`
	UnitsPerEm         *int         `xml:"units-per-em,attr"`
	XHeight            *int         `xml:"x-height,attr"`
	FontFaceSrcElem    *FontFaceSrc `xml:"font-face-src"`
}

type FontFaceName struct {
	Name string `xml:"name,attr"`
}

type FontFaceSrc struct {
	FontFaceNameElem *FontFaceName `xml:"font-face-name"`
	FontFaceUriElem  *FontFaceUri  `xml:"font-face-uri"`
}

type FontFaceUri struct {
	HRef string `xml:"href,attr"`
}

type Foo struct {
	XMLNS   string `xml:"xmlns,attr"`
	BarElem Bar    `xml:"bar"`
}

type ForeignObject struct {
	SVGElem SVG `xml:"svg"`
}

type G struct {
	Base                     *string           `xml:"base,attr"`
	Bd                       *string           `xml:"bd,attr"`
	Class                    *string           `xml:"class,attr"`
	ClipPath                 *string           `xml:"clip-path,attr"`
	ClipRule                 *string           `xml:"clip-rule,attr"`
	Color                    *string           `xml:"color,attr"`
	ColorInterpolation       *string           `xml:"color-interpolation,attr"`
	Cursor                   *string           `xml:"cursor,attr"`
	Direction                *string           `xml:"direction,attr"`
	Display                  *string           `xml:"display,attr"`
	EnableBackground         *string           `xml:"enable-background,attr"`
	Fill                     *string           `xml:"fill,attr"`
	FillOpacity              *float64          `xml:"fill-opacity,attr"`
	FillRule                 *string           `xml:"fill-rule,attr"`
	Filter                   *string           `xml:"filter,attr"`
	FontFamily               *string           `xml:"font-family,attr"`
	FontSize                 *string           `xml:"font-size,attr"`
	FontStyle                *string           `xml:"font-style,attr"`
	FontVariant              *string           `xml:"font-variant,attr"`
	FontWeight               *string           `xml:"font-weight,attr"`
	GlyphOrientationVertical *int              `xml:"glyph-orientation-vertical,attr"`
	HRef                     *string           `xml:"href,attr"`
	ID                       *string           `xml:"id,attr"`
	LetterSpacing            *int              `xml:"letter-spacing,attr"`
	Marker                   *string           `xml:"marker,attr"`
	MarkerEnd                *string           `xml:"marker-end,attr"`
	MarkerMid                *string           `xml:"marker-mid,attr"`
	MarkerStart              *string           `xml:"marker-start,attr"`
	Mask                     *string           `xml:"mask,attr"`
	OnActivate               *string           `xml:"onactivate,attr"`
	OnClick                  *string           `xml:"onclick,attr"`
	OnFocusIn                *string           `xml:"onfocusin,attr"`
	OnFocusOut               *string           `xml:"onfocusout,attr"`
	OnMouseDown              *string           `xml:"onmousedown,attr"`
	OnMouseMove              *string           `xml:"onmousemove,attr"`
	OnMouseOut               *string           `xml:"onmouseout,attr"`
	OnMouseOver              *string           `xml:"onmouseover,attr"`
	OnMouseUp                *string           `xml:"onmouseup,attr"`
	Onload                   *string           `xml:"onload,attr"`
	Opacity                  *float64          `xml:"opacity,attr"`
	PointerEvents            *string           `xml:"pointer-events,attr"`
	RequiredExtensions       *string           `xml:"requiredExtensions,attr"`
	RequiredFeatures         *string           `xml:"requiredFeatures,attr"`
	S                        *string           `xml:"s,attr"`
	ShapeRendering           *string           `xml:"shape-rendering,attr"`
	Space                    *string           `xml:"space,attr"`
	StopColor                *string           `xml:"stop-color,attr"`
	StopOpacity              *float64          `xml:"stop-opacity,attr"`
	Stroke                   *string           `xml:"stroke,attr"`
	StrokeDashArray          *string           `xml:"stroke-dasharray,attr"`
	StrokeDashOffset         *int              `xml:"stroke-dashoffset,attr"`
	StrokeLineCap            *string           `xml:"stroke-linecap,attr"`
	StrokeLineJoin           *string           `xml:"stroke-linejoin,attr"`
	StrokeMiterLimit         *int              `xml:"stroke-miterlimit,attr"`
	StrokeOpacity            *float64          `xml:"stroke-opacity,attr"`
	StrokeWidth              *float64          `xml:"stroke-width,attr"`
	Style                    *string           `xml:"style,attr"`
	SystemLanguage           *string           `xml:"systemLanguage,attr"`
	TextAnchor               *string           `xml:"text-anchor,attr"`
	TextRendering            *string           `xml:"text-rendering,attr"`
	Transform                *string           `xml:"transform,attr"`
	Visibility               *string           `xml:"visibility,attr"`
	WritingMode              *string           `xml:"writing-mode,attr"`
	XLink                    *string           `xml:"xlink,attr"`
	XMLNS                    *string           `xml:"xmlns,attr"`
	AElem                    []A               `xml:"a"`
	AltGlyphDefElem          []AltGlyphDef     `xml:"altGlyphDef"`
	AnimateElem              []Animate         `xml:"animate"`
	AnimateColorElem         []AnimateColor    `xml:"animateColor"`
	AnimateTransformElem     *AnimateTransform `xml:"animateTransform"`
	CircleElem               []Circle          `xml:"circle"`
	ClipPathElem             []ClipPath        `xml:"clipPath"`
	DefsElem                 []Defs            `xml:"defs"`
	DescElem                 []Desc            `xml:"desc"`
	EllipseElem              []Ellipse         `xml:"ellipse"`
	FilterElem               []Filter          `xml:"filter"`
	FontElem                 []Font            `xml:"font"`
	FontFaceElem             *FontFace         `xml:"font-face"`
	FooElem                  *Foo              `xml:"foo"`
	GElem                    []G               `xml:"g"`
	ImageElem                []Image           `xml:"image"`
	LineElem                 []Line            `xml:"line"`
	LinearGradientElem       []LinearGradient  `xml:"linearGradient"`
	MarkerElem               []Marker          `xml:"marker"`
	MaskElem                 []Mask            `xml:"mask"`
	MetadataElem             *Metadata         `xml:"metadata"`
	PathElem                 []Path            `xml:"path"`
	PatternElem              []Pattern         `xml:"pattern"`
	PolyLineElem             []PolyLine        `xml:"polyline"`
	PolygonElem              []Polygon         `xml:"polygon"`
	RadialGradientElem       []RadialGradient  `xml:"radialGradient"`
	RectElem                 []Rect            `xml:"rect"`
	ResultsElem              *Results          `xml:"Results"`
	SVGElem                  []SVG             `xml:"svg"`
	ScriptElem               []Script          `xml:"script"`
	SetElem                  []Set             `xml:"set"`
	StyleElem                []Style           `xml:"style"`
	SwitchElem               []Switch          `xml:"switch"`
	SymbolElem               []Symbol          `xml:"symbol"`
	TextElem                 []Text            `xml:"text"`
	TitleElem                *Title            `xml:"title"`
	UseElem                  []Use             `xml:"use"`
	ViewElem                 []View            `xml:"view"`
}

type Glyph struct {
	ArabicForm *string `xml:"arabic-form,attr"`
	D          *string `xml:"d,attr"`
	GlyphName  *string `xml:"glyph-name,attr"`
	HorizAdvX  *int    `xml:"horiz-adv-x,attr"`
	ID         *string `xml:"id,attr"`
	Lang       *string `xml:"lang,attr"`
	Unicode    *string `xml:"unicode,attr"`
}

type GlyphRef struct {
	HRef string `xml:"href,attr"`
}

type HKern struct {
	G1 *string `xml:"g1,attr"`
	G2 *string `xml:"g2,attr"`
	K  int     `xml:"k,attr"`
	U1 *string `xml:"u1,attr"`
	U2 *string `xml:"u2,attr"`
}

type Image struct {
	Base                 *string           `xml:"base,attr"`
	Clip                 *string           `xml:"clip,attr"`
	ClipPath             *string           `xml:"clip-path,attr"`
	ColorProfile         *string           `xml:"color-profile,attr"`
	Fill                 *string           `xml:"fill,attr"`
	Filter               *string           `xml:"filter,attr"`
	HRef                 string            `xml:"href,attr"`
	Height               string            `xml:"height,attr"`
	ID                   *string           `xml:"id,attr"`
	OnClick              *string           `xml:"onclick,attr"`
	Onload               *string           `xml:"onload,attr"`
	Overflow             *string           `xml:"overflow,attr"`
	PreserveAspectRatio  *string           `xml:"preserveAspectRatio,attr"`
	Transform            *string           `xml:"transform,attr"`
	Visibility           *string           `xml:"visibility,attr"`
	Width                string            `xml:"width,attr"`
	X                    *int              `xml:"x,attr"`
	Y                    *int              `xml:"y,attr"`
	AnimateElem          []Animate         `xml:"animate"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	SetElem              *Set              `xml:"set"`
}

type LI struct {
	CharData string `xml:",chardata"`
	AElem    *A     `xml:"a"`
	SpanElem *Span  `xml:"span"`
	ULElem   *UL    `xml:"ul"`
}

type LU struct {
	LIElem []LI `xml:"li"`
}

type Line struct {
	Class                *string           `xml:"class,attr"`
	Fill                 *string           `xml:"fill,attr"`
	ID                   *string           `xml:"id,attr"`
	MarkerEnd            *string           `xml:"marker-end,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	StrokeDashArray      *string           `xml:"stroke-dasharray,attr"`
	StrokeDashOffset     *string           `xml:"stroke-dashoffset,attr"`
	StrokeLineCap        *string           `xml:"stroke-linecap,attr"`
	StrokeWidth          *string           `xml:"stroke-width,attr"`
	Style                *string           `xml:"style,attr"`
	Transform            *string           `xml:"transform,attr"`
	Visibility           *string           `xml:"visibility,attr"`
	X1                   *string           `xml:"x1,attr"`
	X2                   *string           `xml:"x2,attr"`
	Y1                   *string           `xml:"y1,attr"`
	Y2                   *string           `xml:"y2,attr"`
	AnimateElem          []Animate         `xml:"animate"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	SetElem              *Set              `xml:"set"`
}

type LinearGradient struct {
	Color              *string  `xml:"color,attr"`
	ColorInterpolation *string  `xml:"color-interpolation,attr"`
	Display            string   `xml:"display,attr"`
	GradientTransform  *string  `xml:"gradientTransform,attr"`
	GradientUnits      *string  `xml:"gradientUnits,attr"`
	HRef               *string  `xml:"href,attr"`
	ID                 *string  `xml:"id,attr"`
	SpreadMethod       *string  `xml:"spreadMethod,attr"`
	StopColor          *string  `xml:"stop-color,attr"`
	StopOpacity        *string  `xml:"stop-opacity,attr"`
	X1                 *string  `xml:"x1,attr"`
	X2                 *string  `xml:"x2,attr"`
	Y1                 *string  `xml:"y1,attr"`
	Y2                 *string  `xml:"y2,attr"`
	AnimateElem        *Animate `xml:"animate"`
	StopElem           []Stop   `xml:"stop"`
}

type MPath struct {
	HRef string `xml:"href,attr"`
}

type Marker struct {
	Display      *string  `xml:"display,attr"`
	Fill         *string  `xml:"fill,attr"`
	ID           string   `xml:"id,attr"`
	MarkerHeight *int     `xml:"markerHeight,attr"`
	MarkerUnits  *string  `xml:"markerUnits,attr"`
	MarkerWidth  *int     `xml:"markerWidth,attr"`
	Orient       *string  `xml:"orient,attr"`
	Overflow     *string  `xml:"overflow,attr"`
	RefX         *float64 `xml:"refX,attr"`
	RefY         *float64 `xml:"refY,attr"`
	ViewBox      *string  `xml:"viewBox,attr"`
	CircleElem   *Circle  `xml:"circle"`
	PathElem     *Path    `xml:"path"`
	RectElem     *Rect    `xml:"rect"`
}

type Mask struct {
	ColorInterpolation *string  `xml:"color-interpolation,attr"`
	Filter             *string  `xml:"filter,attr"`
	Height             *int     `xml:"height,attr"`
	ID                 string   `xml:"id,attr"`
	MaskContentUnits   *string  `xml:"maskContentUnits,attr"`
	MaskUnits          *string  `xml:"maskUnits,attr"`
	Opacity            *int     `xml:"opacity,attr"`
	Width              *int     `xml:"width,attr"`
	X                  *int     `xml:"x,attr"`
	Y                  *int     `xml:"y,attr"`
	CircleElem         []Circle `xml:"circle"`
	DefsElem           *Defs    `xml:"defs"`
	GElem              *G       `xml:"g"`
	RectElem           []Rect   `xml:"rect"`
	TextElem           *Text    `xml:"text"`
	UseElem            Use      `xml:"use"`
}

type Metadata struct {
	CharData string `xml:",chardata"`
	RDFElem  RDF    `xml:"RDF"`
}

type MissingGlyph struct {
	D         *string `xml:"d,attr"`
	HorizAdvX *int    `xml:"horiz-adv-x,attr"`
	PathElem  *Path   `xml:"path"`
}

type Next struct {
	BENumber int    `xml:"BENumber,attr"`
	Chapter  string `xml:"chapter,attr"`
	Focus    string `xml:"focus,attr"`
}

type OL struct {
	LIElem []LI `xml:"li"`
}

type OperatorScript struct {
	TestName      *string  `xml:"testname,attr"`
	Version       *string  `xml:"version,attr"`
	ParagraphElem []string `xml:"Paragraph"`
}

type OperatorScriptLowerElem struct {
	XMLNS    string `xml:"xmlns,attr"`
	CharData string `xml:",chardata"`
	PElem    []P    `xml:"p"`
}

type P struct {
	Class      *string  `xml:"class,attr"`
	CharData   string   `xml:",chardata"`
	AElem      []A      `xml:"a"`
	CodeElem   []string `xml:"code"`
	EmElem     []string `xml:"em"`
	SpanElem   []Span   `xml:"span"`
	StrongElem *string  `xml:"strong"`
}

type Parent struct {
	Chapter string `xml:"chapter,attr"`
}

type PassCriteria struct {
	XMLNS  string `xml:"xmlns,attr"`
	LUElem *LU    `xml:"lu"`
	OLElem *OL    `xml:"ol"`
	PElem  []P    `xml:"p"`
	ULElem []UL   `xml:"ul"`
}

type Path struct {
	Class             *string        `xml:"class,attr"`
	ClipRule          *string        `xml:"clip-rule,attr"`
	D                 string         `xml:"d,attr"`
	Fill              *string        `xml:"fill,attr"`
	FillOpacity       *float64       `xml:"fill-opacity,attr"`
	FillRule          *string        `xml:"fill-rule,attr"`
	Filter            *string        `xml:"filter,attr"`
	ID                *string        `xml:"id,attr"`
	MarkerEnd         *string        `xml:"marker-end,attr"`
	MarkerMid         *string        `xml:"marker-mid,attr"`
	MarkerStart       *string        `xml:"marker-start,attr"`
	PathLength        *int           `xml:"pathLength,attr"`
	Stroke            *string        `xml:"stroke,attr"`
	StrokeDashArray   *string        `xml:"stroke-dasharray,attr"`
	StrokeDashOffset  *string        `xml:"stroke-dashoffset,attr"`
	StrokeLineCap     *string        `xml:"stroke-linecap,attr"`
	StrokeLineJoin    *string        `xml:"stroke-linejoin,attr"`
	StrokeMiterLimit  *float64       `xml:"stroke-miterlimit,attr"`
	StrokeOpacity     *float64       `xml:"stroke-opacity,attr"`
	StrokeWidth       *float64       `xml:"stroke-width,attr"`
	Style             *string        `xml:"style,attr"`
	Transform         *string        `xml:"transform,attr"`
	Visibility        *string        `xml:"visibility,attr"`
	AnimateElem       []Animate      `xml:"animate"`
	AnimateMotionElem *AnimateMotion `xml:"animateMotion"`
	SetElem           *Set           `xml:"set"`
}

type Pattern struct {
	HRef                *string `xml:"href,attr"`
	Height              *string `xml:"height,attr"`
	ID                  *string `xml:"id,attr"`
	PatternContentUnits *string `xml:"patternContentUnits,attr"`
	PatternTransform    *string `xml:"patternTransform,attr"`
	PatternUnits        *string `xml:"patternUnits,attr"`
	ViewBox             *string `xml:"viewBox,attr"`
	Width               *string `xml:"width,attr"`
	X                   *string `xml:"x,attr"`
	Y                   *string `xml:"y,attr"`
	CircleElem          *Circle `xml:"circle"`
	RectElem            []Rect  `xml:"rect"`
}

type PolyLine struct {
	Class                *string           `xml:"class,attr"`
	Display              *string           `xml:"display,attr"`
	Fill                 *string           `xml:"fill,attr"`
	FillRule             *string           `xml:"fill-rule,attr"`
	ID                   *string           `xml:"id,attr"`
	LetterSpacing        *string           `xml:"letter-spacing,attr"`
	Points               string            `xml:"points,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	StrokeDashArray      *string           `xml:"stroke-dasharray,attr"`
	StrokeDashOffset     *int              `xml:"stroke-dashoffset,attr"`
	StrokeLineCap        *string           `xml:"stroke-linecap,attr"`
	StrokeLineJoin       *string           `xml:"stroke-linejoin,attr"`
	StrokeMiterLimit     *string           `xml:"stroke-miterlimit,attr"`
	StrokeWidth          *float64          `xml:"stroke-width,attr"`
	Transform            *string           `xml:"transform,attr"`
	AnimateElem          []Animate         `xml:"animate"`
	AnimateMotionElem    *AnimateMotion    `xml:"animateMotion"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	SetElem              *Set              `xml:"set"`
}

type Polygon struct {
	Class                *string           `xml:"class,attr"`
	Cursor               *string           `xml:"cursor,attr"`
	Fill                 *string           `xml:"fill,attr"`
	FillRule             *string           `xml:"fill-rule,attr"`
	Filter               *string           `xml:"filter,attr"`
	ID                   *string           `xml:"id,attr"`
	Points               *string           `xml:"points,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	StrokeWidth          *int              `xml:"stroke-width,attr"`
	Transform            *string           `xml:"transform,attr"`
	AnimateElem          *Animate          `xml:"animate"`
	AnimateMotionElem    *AnimateMotion    `xml:"animateMotion"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
}

type Previous struct {
	BENumber int    `xml:"BENumber,attr"`
	Chapter  string `xml:"chapter,attr"`
	Focus    string `xml:"focus,attr"`
}

type RDF struct {
	Dc              string      `xml:"dc,attr"`
	Prism           string      `xml:"prism,attr"`
	RDFS            string      `xml:"rdfs,attr"`
	Rdf             string      `xml:"rdf,attr"`
	DescriptionElem Description `xml:"Description"`
}

type RadialGradient struct {
	CX                *string `xml:"cx,attr"`
	CY                *string `xml:"cy,attr"`
	Color             *string `xml:"color,attr"`
	FX                *string `xml:"fx,attr"`
	FY                *string `xml:"fy,attr"`
	GradientTransform *string `xml:"gradientTransform,attr"`
	GradientUnits     *string `xml:"gradientUnits,attr"`
	HRef              *string `xml:"href,attr"`
	ID                *string `xml:"id,attr"`
	R                 *string `xml:"r,attr"`
	SpreadMethod      *string `xml:"spreadMethod,attr"`
	StopColor         *string `xml:"stop-color,attr"`
	Visibility        *string `xml:"visibility,attr"`
	StopElem          []Stop  `xml:"stop"`
}

type Rect struct {
	Class                *string            `xml:"class,attr"`
	ClipPath             *string            `xml:"clip-path,attr"`
	Color                *string            `xml:"color,attr"`
	ColorInterpolation   *string            `xml:"color-interpolation,attr"`
	Cursor               *string            `xml:"cursor,attr"`
	Display              *string            `xml:"display,attr"`
	Fill                 *string            `xml:"fill,attr"`
	FillOpacity          *float64           `xml:"fill-opacity,attr"`
	Filter               *string            `xml:"filter,attr"`
	FontSize             *string            `xml:"font-size,attr"`
	Height               *string            `xml:"height,attr"`
	ID                   *string            `xml:"id,attr"`
	Mask                 *string            `xml:"mask,attr"`
	OnClick              *string            `xml:"onclick,attr"`
	OnMouseOut           *string            `xml:"onmouseout,attr"`
	OnMouseOver          *string            `xml:"onmouseover,attr"`
	Onload               *string            `xml:"onload,attr"`
	Opacity              *float64           `xml:"opacity,attr"`
	PointerEvents        *string            `xml:"pointer-events,attr"`
	RX                   *float64           `xml:"rx,attr"`
	RY                   *int               `xml:"ry,attr"`
	RequiredExtensions   *string            `xml:"requiredExtensions,attr"`
	RequiredFeatures     *string            `xml:"requiredFeatures,attr"`
	StopColor            *string            `xml:"stop-color,attr"`
	Stroke               *string            `xml:"stroke,attr"`
	StrokeDashArray      *string            `xml:"stroke-dasharray,attr"`
	StrokeLineJoin       *string            `xml:"stroke-linejoin,attr"`
	StrokeOpacity        *float64           `xml:"stroke-opacity,attr"`
	StrokeWidth          *string            `xml:"stroke-width,attr"`
	Style                *string            `xml:"style,attr"`
	SystemLanguage       *string            `xml:"systemLanguage,attr"`
	Transform            *string            `xml:"transform,attr"`
	Visibility           *string            `xml:"visibility,attr"`
	Width                *string            `xml:"width,attr"`
	X                    *string            `xml:"x,attr"`
	Y                    *string            `xml:"y,attr"`
	AnimateElem          []Animate          `xml:"animate"`
	AnimateColorElem     []AnimateColor     `xml:"animateColor"`
	AnimateMotionElem    *AnimateMotion     `xml:"animateMotion"`
	AnimateTransformElem []AnimateTransform `xml:"animateTransform"`
	SetElem              []Set              `xml:"set"`
}

type Region struct {
	RegionNameElem   string  `xml:"RegionName"`
	RegionResultElem float64 `xml:"RegionResult"`
}

type Results struct {
	ID         string   `xml:"id,attr"`
	RegionElem []Region `xml:"Region"`
}

type SVG struct {
	BaseProfile               *string          `xml:"baseProfile,attr"`
	ExternalResourcesRequired *bool            `xml:"externalResourcesRequired,attr"`
	Height                    *int             `xml:"height,attr"`
	ID                        *string          `xml:"id,attr"`
	Onload                    *string          `xml:"onload,attr"`
	Overflow                  *string          `xml:"overflow,attr"`
	PreserveAspectRatio       *string          `xml:"preserveAspectRatio,attr"`
	Version                   *float64         `xml:"version,attr"`
	ViewBox                   *string          `xml:"viewBox,attr"`
	Width                     *int             `xml:"width,attr"`
	X                         *int             `xml:"x,attr"`
	XLink                     *string          `xml:"xlink,attr"`
	XMLNS                     *string          `xml:"xmlns,attr"`
	Y                         *int             `xml:"y,attr"`
	AElem                     []A              `xml:"a"`
	AnimateElem               *Animate         `xml:"animate"`
	CircleElem                []Circle         `xml:"circle"`
	DefsElem                  []Defs           `xml:"defs"`
	DescElem                  *Desc            `xml:"desc"`
	EllipseElem               *Ellipse         `xml:"ellipse"`
	FontElem                  *Font            `xml:"font"`
	GElem                     []G              `xml:"g"`
	ImageElem                 []Image          `xml:"image"`
	LineElem                  *Line            `xml:"line"`
	MetadataElem              *Metadata        `xml:"metadata"`
	PathElem                  *Path            `xml:"path"`
	PolyLineElem              *PolyLine        `xml:"polyline"`
	PolygonElem               *Polygon         `xml:"polygon"`
	RadialGradientElem        []RadialGradient `xml:"radialGradient"`
	RectElem                  []Rect           `xml:"rect"`
	SVGElem                   []SVG            `xml:"svg"`
	SVGTestCaseElem           *SVGTestCase     `xml:"SVGTestCase"`
	ScriptElem                *Script          `xml:"script"`
	StyleElem                 *Style           `xml:"style"`
	TextElem                  []Text           `xml:"text"`
	TitleElem                 *Title           `xml:"title"`
	UseElem                   *Use             `xml:"use"`
}

type SVGTestCase struct {
	Author                      *string                  `xml:"author,attr"`
	BENumber                    *int                     `xml:"BENumber,attr"`
	Chapter                     *string                  `xml:"chapter,attr"`
	D                           *string                  `xml:"d,attr"`
	Focus                       *string                  `xml:"focus,attr"`
	Owner                       *string                  `xml:"owner,attr"`
	Reviewer                    *string                  `xml:"reviewer,attr"`
	Status                      *string                  `xml:"status,attr"`
	TemplateVersion             *float64                 `xml:"template-version,attr"`
	TestName                    *string                  `xml:"testname,attr"`
	TestType                    *string                  `xml:"testType,attr"`
	Version                     *string                  `xml:"version,attr"`
	XMLNS                       *string                  `xml:"xmlns,attr"`
	ChildElem                   *Child                   `xml:"Child"`
	NextElem                    *Next                    `xml:"Next"`
	OperatorScriptElem          *OperatorScript          `xml:"OperatorScript"`
	OperatorScriptLowerElemElem *OperatorScriptLowerElem `xml:"operatorScript"`
	ParentElem                  *Parent                  `xml:"Parent"`
	PassCriteriaElem            *PassCriteria            `xml:"passCriteria"`
	PreviousElem                *Previous                `xml:"Previous"`
	TestDescriptionElem         *TestDescription         `xml:"testDescription"`
}

type Script struct {
	HRef     *string `xml:"href,attr"`
	ID       *string `xml:"id,attr"`
	Type     *string `xml:"type,attr"`
	CharData string  `xml:",chardata"`
}

type Set struct {
	AttributeName string  `xml:"attributeName,attr"`
	AttributeType *string `xml:"attributeType,attr"`
	Begin         *string `xml:"begin,attr"`
	Dur           *string `xml:"dur,attr"`
	End           *string `xml:"end,attr"`
	Fill          *string `xml:"fill,attr"`
	HRef          *string `xml:"href,attr"`
	ID            *string `xml:"id,attr"`
	Max           *string `xml:"max,attr"`
	Min           *string `xml:"min,attr"`
	OnBegin       *string `xml:"onbegin,attr"`
	OnEnd         *string `xml:"onend,attr"`
	RepeatCount   *string `xml:"repeatCount,attr"`
	RepeatDur     *string `xml:"repeatDur,attr"`
	Restart       *string `xml:"restart,attr"`
	To            string  `xml:"to,attr"`
}

type Span struct {
	Style    string `xml:"style,attr"`
	CharData string `xml:",chardata"`
}

type Stop struct {
	FillRule    *string `xml:"fill-rule,attr"`
	ID          *string `xml:"id,attr"`
	Offset      *string `xml:"offset,attr"`
	StopColor   *string `xml:"stop-color,attr"`
	StopOpacity *string `xml:"stop-opacity,attr"`
}

type Style struct {
	Type     *string `xml:"type,attr"`
	CharData string  `xml:",chardata"`
}

type Switch struct {
	Fill                 *string           `xml:"fill,attr"`
	ID                   *string           `xml:"id,attr"`
	Stroke               *string           `xml:"stroke,attr"`
	Transform            *string           `xml:"transform,attr"`
	AnimateTransformElem *AnimateTransform `xml:"animateTransform"`
	GElem                []G               `xml:"g"`
	RectElem             []Rect            `xml:"rect"`
}

type Symbol struct {
	ID                  string  `xml:"id,attr"`
	Overflow            string  `xml:"overflow,attr"`
	PreserveAspectRatio *string `xml:"preserveAspectRatio,attr"`
	ViewBox             *string `xml:"viewBox,attr"`
	CircleElem          *Circle `xml:"circle"`
	ImageElem           *Image  `xml:"image"`
	RectElem            []Rect  `xml:"rect"`
	UseElem             Use     `xml:"use"`
}

type TRef struct {
	Fill       *string `xml:"fill,attr"`
	FloodColor *string `xml:"flood-color,attr"`
	HRef       string  `xml:"href,attr"`
	ID         *string `xml:"id,attr"`
	Space      string  `xml:"space,attr"`
	X          *string `xml:"x,attr"`
	Y          *int    `xml:"y,attr"`
}

type TSpan struct {
	BaselineShift  *string  `xml:"baseline-shift,attr"`
	Color          *string  `xml:"color,attr"`
	DX             *string  `xml:"dx,attr"`
	DY             *float64 `xml:"dy,attr"`
	Fill           *string  `xml:"fill,attr"`
	FontFamily     *string  `xml:"font-family,attr"`
	FontSize       *int     `xml:"font-size,attr"`
	FontWeight     *string  `xml:"font-weight,attr"`
	ID             *string  `xml:"id,attr"`
	Lang           *string  `xml:"lang,attr"`
	LineHeight     *int     `xml:"line-height,attr"`
	Rotate         *string  `xml:"rotate,attr"`
	Space          *string  `xml:"space,attr"`
	StopOpacity    *float64 `xml:"stop-opacity,attr"`
	Stroke         *string  `xml:"stroke,attr"`
	TextAnchor     *string  `xml:"text-anchor,attr"`
	TextDecoration *string  `xml:"text-decoration,attr"`
	X              *string  `xml:"x,attr"`
	Y              *float64 `xml:"y,attr"`
	CharData       string   `xml:",chardata"`
	AElem          *A       `xml:"a"`
	TSpanElem      []TSpan  `xml:"tspan"`
}

type TestDescription struct {
	HRef     string `xml:"href,attr"`
	XMLNS    string `xml:"xmlns,attr"`
	CharData string `xml:",chardata"`
	PElem    []P    `xml:"p"`
	ULElem   *UL    `xml:"ul"`
}

type Text struct {
	Class                    *string            `xml:"class,attr"`
	DX                       *string            `xml:"dx,attr"`
	DY                       *string            `xml:"dy,attr"`
	Direction                *string            `xml:"direction,attr"`
	Display                  *string            `xml:"display,attr"`
	Fill                     *string            `xml:"fill,attr"`
	FillOpacity              *float64           `xml:"fill-opacity,attr"`
	Filter                   *string            `xml:"filter,attr"`
	FontFamily               *string            `xml:"font-family,attr"`
	FontSize                 *string            `xml:"font-size,attr"`
	FontStyle                *string            `xml:"font-style,attr"`
	FontVariant              *string            `xml:"font-variant,attr"`
	FontWeight               *string            `xml:"font-weight,attr"`
	GlyphOrientationVertical *int               `xml:"glyph-orientation-vertical,attr"`
	ID                       *string            `xml:"id,attr"`
	Lang                     *string            `xml:"lang,attr"`
	LengthAdjust             *string            `xml:"lengthAdjust,attr"`
	LetterSpacing            *float64           `xml:"letter-spacing,attr"`
	Mask                     *string            `xml:"mask,attr"`
	OnClick                  *string            `xml:"onclick,attr"`
	OnMouseOut               *string            `xml:"onmouseout,attr"`
	OnMouseOver              *string            `xml:"onmouseover,attr"`
	Opacity                  *float64           `xml:"opacity,attr"`
	PointerEvents            *string            `xml:"pointer-events,attr"`
	Rotate                   *string            `xml:"rotate,attr"`
	Space                    *string            `xml:"space,attr"`
	StopColor                *string            `xml:"stop-color,attr"`
	Stroke                   *string            `xml:"stroke,attr"`
	StrokeOpacity            *float64           `xml:"stroke-opacity,attr"`
	StrokeWidth              *float64           `xml:"stroke-width,attr"`
	Style                    *string            `xml:"style,attr"`
	TextAnchor               *string            `xml:"text-anchor,attr"`
	TextDecoration           *string            `xml:"text-decoration,attr"`
	TextLength               *int               `xml:"textLength,attr"`
	Transform                *string            `xml:"transform,attr"`
	UnicodeBiDi              *string            `xml:"unicode-bidi,attr"`
	Visibility               *string            `xml:"visibility,attr"`
	WordSpacing              *int               `xml:"word-spacing,attr"`
	X                        *string            `xml:"x,attr"`
	Y                        *string            `xml:"y,attr"`
	CharData                 string             `xml:",chardata"`
	AElem                    *A                 `xml:"a"`
	AltGlyphElem             []AltGlyph         `xml:"altGlyph"`
	AnimateMotionElem        *AnimateMotion     `xml:"animateMotion"`
	AnimateTransformElem     []AnimateTransform `xml:"animateTransform"`
	SetElem                  []Set              `xml:"set"`
	TRefElem                 []TRef             `xml:"tref"`
	TSpanElem                []TSpan            `xml:"tspan"`
	TextPathElem             *TextPath          `xml:"textPath"`
}

type TextPath struct {
	FloodOpacity *float64 `xml:"flood-opacity,attr"`
	HRef         string   `xml:"href,attr"`
	ID           *string  `xml:"id,attr"`
	StartOffset  *string  `xml:"startOffset,attr"`
	TextAnchor   *string  `xml:"text-anchor,attr"`
	CharData     string   `xml:",chardata"`
	TSpanElem    []TSpan  `xml:"tspan"`
}

type Title struct {
	ID       *string `xml:"id,attr"`
	CharData string  `xml:",chardata"`
}

type Type struct {
	Resource string `xml:"resource,attr"`
}

type UL struct {
	LIElem []LI `xml:"li"`
}

type Use struct {
	ClipPath             *string            `xml:"clip-path,attr"`
	Display              *string            `xml:"display,attr"`
	Fill                 *string            `xml:"fill,attr"`
	FillOpacity          *float64           `xml:"fill-opacity,attr"`
	FillRule             *string            `xml:"fill-rule,attr"`
	Filter               *string            `xml:"filter,attr"`
	FontFamily           *string            `xml:"font-family,attr"`
	FontSize             *int               `xml:"font-size,attr"`
	FontStyle            *string            `xml:"font-style,attr"`
	FontWeight           *string            `xml:"font-weight,attr"`
	HRef                 string             `xml:"href,attr"`
	Height               *int               `xml:"height,attr"`
	ID                   *string            `xml:"id,attr"`
	OnClick              *string            `xml:"onclick,attr"`
	OnMouseDown          *string            `xml:"onmousedown,attr"`
	OnMouseOut           *string            `xml:"onmouseout,attr"`
	OnMouseOver          *string            `xml:"onmouseover,attr"`
	OnMouseUp            *string            `xml:"onmouseup,attr"`
	Stroke               *string            `xml:"stroke,attr"`
	StrokeWidth          *int               `xml:"stroke-width,attr"`
	Style                *string            `xml:"style,attr"`
	TextAnchor           *string            `xml:"text-anchor,attr"`
	Transform            *string            `xml:"transform,attr"`
	Visibility           *string            `xml:"visibility,attr"`
	Width                *int               `xml:"width,attr"`
	X                    *float64           `xml:"x,attr"`
	Y                    *int               `xml:"y,attr"`
	AnimateElem          []Animate          `xml:"animate"`
	AnimateMotionElem    *AnimateMotion     `xml:"animateMotion"`
	AnimateTransformElem []AnimateTransform `xml:"animateTransform"`
	SetElem              *Set               `xml:"set"`
	UseElem              *Use               `xml:"use"`
}

type View struct {
	ID                  string  `xml:"id,attr"`
	PreserveAspectRatio *string `xml:"preserveAspectRatio,attr"`
	ViewBox             *string `xml:"viewBox,attr"`
	ViewTarget          *string `xml:"viewTarget,attr"`
}
