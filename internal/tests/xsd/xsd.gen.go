// This file is automatically generated. DO NOT EDIT.

package xsd

type Annotation struct {
	AppInfo       *string `xml:"appinfo"`
	Documentation string  `xml:"documentation"`
}

type Any struct {
	MaxOccurs       *string `xml:"maxOccurs,attr"`
	MinOccurs       *bool   `xml:"minOccurs,attr"`
	Namespace       string  `xml:"namespace,attr"`
	ProcessContents string  `xml:"processContents,attr"`
}

type AnyAttribute struct {
	Namespace       string `xml:"namespace,attr"`
	ProcessContents string `xml:"processContents,attr"`
}

type Attribute struct {
	Default *string `xml:"default,attr"`
	Name    *string `xml:"name,attr"`
	Ref     *string `xml:"ref,attr"`
	Type    *string `xml:"type,attr"`
	Use     *string `xml:"use,attr"`
}

type AttributeGroup struct {
	Name      string      `xml:"name,attr"`
	Ref       *string     `xml:"ref,attr"`
	Attribute []Attribute `xml:"attribute"`
}

type Choice struct {
	MaxOccurs  *string     `xml:"maxOccurs,attr"`
	MinOccurs  *bool       `xml:"minOccurs,attr"`
	Annotation *Annotation `xml:"annotation"`
	Element    []Element   `xml:"element"`
}

type ComplexContent struct {
	Mixed     *bool     `xml:"mixed,attr"`
	Extension Extension `xml:"extension"`
}

type ComplexType struct {
	Abstract       *bool           `xml:"abstract,attr"`
	Final          *string         `xml:"final,attr"`
	Mixed          *bool           `xml:"mixed,attr"`
	Name           string          `xml:"name,attr"`
	Annotation     *Annotation     `xml:"annotation"`
	Attribute      []Attribute     `xml:"attribute"`
	AttributeGroup *AttributeGroup `xml:"attributeGroup"`
	Choice         *Choice         `xml:"choice"`
	ComplexContent *ComplexContent `xml:"complexContent"`
	Sequence       *Sequence       `xml:"sequence"`
	SimpleContent  *SimpleContent  `xml:"simpleContent"`
}

type Element struct {
	Abstract          *bool       `xml:"abstract,attr"`
	Default           *string     `xml:"default,attr"`
	MaxOccurs         *string     `xml:"maxOccurs,attr"`
	MinOccurs         *bool       `xml:"minOccurs,attr"`
	Name              *string     `xml:"name,attr"`
	Ref               *string     `xml:"ref,attr"`
	SubstitutionGroup *string     `xml:"substitutionGroup,attr"`
	Type              *string     `xml:"type,attr"`
	Annotation        *Annotation `xml:"annotation"`
}

type Enumeration struct {
	Value string `xml:"value,attr"`
}

type Extension struct {
	Base         string        `xml:"base,attr"`
	AnyAttribute *AnyAttribute `xml:"anyAttribute"`
	Attribute    []Attribute   `xml:"attribute"`
	Sequence     *Sequence     `xml:"sequence"`
}

type Import struct {
	Namespace      string `xml:"namespace,attr"`
	SchemaLocation string `xml:"schemaLocation,attr"`
}

type Length struct {
	Value int `xml:"value,attr"`
}

type List struct {
	ItemType string `xml:"itemType,attr"`
}

type MaxInclusive struct {
	Value float64 `xml:"value,attr"`
}

type MinInclusive struct {
	Value float64 `xml:"value,attr"`
}

type Pattern struct {
	Value string `xml:"value,attr"`
}

type Restriction struct {
	Base         string        `xml:"base,attr"`
	Enumeration  []Enumeration `xml:"enumeration"`
	Length       *Length       `xml:"length"`
	MaxInclusive *MaxInclusive `xml:"maxInclusive"`
	MinInclusive *MinInclusive `xml:"minInclusive"`
	Pattern      Pattern       `xml:"pattern"`
}

type Schema struct {
	Annotation     *Annotation     `xml:"annotation"`
	AttributeGroup *AttributeGroup `xml:"attributeGroup"`
	ComplexType    []ComplexType   `xml:"complexType"`
	Element        []Element       `xml:"element"`
	Import         []Import        `xml:"import"`
	SimpleType     []SimpleType    `xml:"simpleType"`
}

type Sequence struct {
	MaxOccurs *string   `xml:"maxOccurs,attr"`
	MinOccurs *bool     `xml:"minOccurs,attr"`
	Any       *Any      `xml:"any"`
	Choice    []Choice  `xml:"choice"`
	Element   []Element `xml:"element"`
}

type SimpleContent struct {
	Extension Extension `xml:"extension"`
}

type SimpleType struct {
	Name        string       `xml:"name,attr"`
	Annotation  *Annotation  `xml:"annotation"`
	List        *List        `xml:"list"`
	Restriction *Restriction `xml:"restriction"`
	Union       *Union       `xml:"union"`
}

type Union struct {
	MemberTypes string `xml:"memberTypes,attr"`
}
