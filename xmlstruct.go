// Package xmlstruct generates Go structs from multiple XML documents.
package xmlstruct

import (
	"encoding/xml"
	"regexp"
	"strings"
	"unicode"

	"golang.org/x/exp/constraints"
	"golang.org/x/exp/maps"
	"golang.org/x/exp/slices"
)

const (
	DefaultAttrNameSuffix               = ""
	DefaultCharDataFieldName            = "CharData"
	DefaultElemNameSuffix               = ""
	DefaultFormatSource                 = true
	DefaultHeader                       = "// This file is automatically generated. DO NOT EDIT."
	DefaultTopLevelAttributes           = false
	DefaultIntType                      = "int"
	DefaultNamedTypes                   = false
	DefaultPackageName                  = "main"
	DefaultPreserveOrder                = false
	DefaultTimeLayout                   = "2006-01-02T15:04:05Z"
	DefaultUsePointersForOptionalFields = true
	DefaultUseRawToken                  = false
)

var (
	// TitleFirstRuneExportNameFunc returns name.Local with the initial rune
	// capitalized.
	TitleFirstRuneExportNameFunc = func(name xml.Name) string {
		runes := []rune(name.Local)
		runes[0] = unicode.ToUpper(runes[0])
		return string(runes)
	}

	kebabOrSnakeCaseWordBoundaryRx = regexp.MustCompile(`[-_]+\pL`)
	nonIdentifierRuneRx            = regexp.MustCompile(`[^\pL\pN]+`)

	// DefaultExportNameFunc returns name.Local with kebab- and snakecase words
	// converted to camelcase and any Id suffix converted to ID.
	DefaultExportNameFunc = func(name xml.Name) string {
		localName := kebabOrSnakeCaseWordBoundaryRx.ReplaceAllStringFunc(name.Local, func(s string) string {
			return strings.ToUpper(s[len(s)-1:])
		})
		localName = nonIdentifierRuneRx.ReplaceAllLiteralString(localName, "")
		runes := []rune(localName)
		runes[0] = unicode.ToUpper(runes[0])
		if len(runes) > 1 && runes[len(runes)-2] == 'I' && runes[len(runes)-1] == 'd' {
			runes[len(runes)-1] = 'D'
		}
		return string(runes)
	}
)

var (
	// IgnoreNamespaceNameFunc returns name with name.Space cleared. The same
	// local name in different namespaces will be treated as identical names.
	IgnoreNamespaceNameFunc = func(name xml.Name) xml.Name {
		return xml.Name{
			Local: name.Local,
		}
	}

	// The IdentityNameFunc returns name unchanged. The same local name in
	// different namespaces will be treated as distinct names.
	IdentityNameFunc = func(name xml.Name) xml.Name {
		return name
	}

	DefaultNameFunc = IgnoreNamespaceNameFunc
)

// An ExportNameFunc returns the exported Go identifier for the given xml.Name.
type ExportNameFunc func(xml.Name) string

// A NameFunc modifies xml.Names observed in the XML documents.
type NameFunc func(xml.Name) xml.Name

// observeOptions contains options for observing XML documents.
type observeOptions struct {
	getOrder           func() int
	nameFunc           NameFunc
	timeLayout         string
	typeOrder          map[xml.Name]int
	topLevelAttributes bool
	topLevelElements   map[xml.Name]*element
	useRawToken        bool
}

// generateOptions contains options for generating Go source.
type generateOptions struct {
	attrNameSuffix               string
	charDataFieldName            string
	elemNameSuffix               string
	exportNameFunc               ExportNameFunc
	header                       string
	importPackageNames           map[string]struct{}
	intType                      string
	namedTypes                   map[xml.Name]*element
	preserveOrder                bool
	simpleTypes                  map[xml.Name]struct{}
	usePointersForOptionalFields bool
}

// sortedKeys returns the keys of m in order.
func sortedKeys[M ~map[K]V, K constraints.Ordered, V any](m M) []K {
	keys := maps.Keys(m)
	slices.Sort(keys)
	return keys
}
